package com.comp2601.server;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;

import com.comp2601.message.Message;


/**
 * The class extends the Thread class so we can receive and send messages at the same time
 */
public class Connection extends Thread {

	//TODO:  Set port
	private Socket client;
    private static final int SERVERPORT = 3010; //FOR NOW
    private boolean running = false;
    private ObjectOutputStream mOut;
    private OnMessageReceived messageListener;
    private Random mRandom;
    ObjectOutputStream objectOutputStream;
    ObjectInputStream objectInputStream;


    //Declare the interface. 
    //The method messageReceived(String message)  must be implemented 
    //in the Server class. 
    public interface OnMessageReceived {
        public void messageReceived(Message message);
    }

 

    /**
     * Constructor of the class
     * @param messageListener listens for the messages
     */
    public Connection(Socket socket, OnMessageReceived messageListener) {
        this.messageListener = messageListener;
        this.client = socket;
    }

    /**
     * Method to send the messages from server to client
     * @param message the message sent by the server
     * @throws IOException 
     */
    public void sendMessage(Message message) throws IOException{
    	 
       /*if (mOut != null && !mOut.checkError()) {
               mOut.println(message);
               mOut.flush();
       }*/
       objectOutputStream.writeObject(message);
       objectOutputStream.flush(); 

    }

    @Override
    public void run() {
        super.run();

        running = true;

        try {
            System.out.println("S: Starting client conversation...");

            try {

            	mRandom = new Random();
            	
            	    //TODO: create OutpStreamWriter and an InputStream writer.  
            	    //Order of creation matters
                //sends the message to the client
                mOut = new ObjectOutputStream(client.getOutputStream());

                //read the message received from client
                //using a BufferedReader
                ObjectInputStream in = new ObjectInputStream(client.getInputStream());

                //In this while we wait to receive messages from client 
                //(it's an infinite loop)
                //listening for messages
                
                //TODO: Create a loop to read a line from the input 
                //and the send a reply back to client using the sendMessage method
                while (running) {
                    Message message = in.readLine();

                    if (message != null && messageListener != null) {
                        //call the method messageReceived from ServerBoard class
                       	if (!message.DISCONNECT.equalsIgnoreCase("Disconnect")){
                    		   messageListener.messageReceived(message);
                    		   sendMessage(Common.mReplies.get(mRandom.nextInt(5)));
                      	} else {
                    		   System.out.println("Disconnecting");
                    		   running = false;
                    	    }
                    }
                }

            } catch (Exception e) {
                System.out.println("S: Error");
                e.printStackTrace();
            } finally {
            	sendMessage("Disconnected");
                client.close();
                System.out.println("S: Done.");
            }

        } catch (Exception e) {
            System.out.println("S: Error");
            e.printStackTrace();
        }

    }
}